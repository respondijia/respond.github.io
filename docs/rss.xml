<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>respond的博客</title><link>https://respondijia.github.io/respond.github.io</link><description>一个爱敲代码爱玩崩铁的程序员</description><copyright>respond的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://tse3-mm.cn.bing.net/th/id/OIP-C.c-H6eHA2a-l-gZrI97vABQHaLT?w=134&amp;h=205&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.5&amp;pid=1.7</url><title>avatar</title><link>https://respondijia.github.io/respond.github.io</link></image><lastBuildDate>Thu, 20 Feb 2025 08:07:25 +0000</lastBuildDate><managingEditor>respond的博客</managingEditor><ttl>60</ttl><webMaster>respond的博客</webMaster><item><title>面试刷题</title><link>https://respondijia.github.io/respond.github.io/post/mian-shi-shua-ti.html</link><description># 2025.2.20
## java中基本数据类型有哪些？
一共有 ***8*** 种
整型：1.byte（1字节） 、2.short （2字节）、3.int（4字节） 、4.long（8字节）
浮点型：1.float （4字节）、2.double（8字节）
字符型：char（2字节）
布尔型：boolean
## 什么是java的多态特性
多态就是指同一个接口或者父类引用变量可以指向不同的对象实例，并执行对应的方法。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/mian-shi-shua-ti.html</guid><pubDate>Thu, 20 Feb 2025 08:07:03 +0000</pubDate></item><item><title>佳人-伙伴匹配系统-respond</title><link>https://respondijia.github.io/respond.github.io/post/jia-ren---huo-ban-pi-pei-xi-tong--respond.html</link><description># 2025.2.11
这个项目断断续续做了几个月，今天差不多把基础功能以及一些基本的优化做的差不多了，想想也是该写一篇东西来记录一下了😎
然后的话就基本是一些功能的拓展和优化了，看看最终能做到什么效果吧💕以下是目前打算做的一些功能拓展以及优化，冲冲冲😈

## 1.联系我功能
首先，我打算将这个设计成一个聊天的功能，提供一个基本的聊天界面，具体实现应该也就是用websocket来实现。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/jia-ren---huo-ban-pi-pei-xi-tong--respond.html</guid><pubDate>Tue, 11 Feb 2025 09:40:54 +0000</pubDate></item><item><title>算法学习打卡</title><link>https://respondijia.github.io/respond.github.io/post/suan-fa-xue-xi-da-qia.html</link><description># 算法打卡第一天(2024.10.15)&#13;
今天主要学习了双指针技巧，深刻体会到双指针在链表和数组中的巧妙运用，真佩服能想到双指针的人。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/suan-fa-xue-xi-da-qia.html</guid><pubDate>Mon, 14 Oct 2024 14:55:17 +0000</pubDate></item><item><title>Java 操作 Redis</title><link>https://respondijia.github.io/respond.github.io/post/Java%20-cao-zuo-%20Redis.html</link><description># Spring Data Redis&#13;
java 操作 redis&#13;
&#13;
Spring Data：通用的数据访问框架，定义了一组 增删改查 的接口&#13;
&#13;
还可以操作：mysql、redis、jpa&#13;
&#13;
使用方式如下：&#13;
&#13;
1）引入&#13;
&#13;
```xml&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#13;
    &lt;version&gt;2.6.4&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
```&#13;
2）配置 Redis 地址&#13;
&#13;
```xml&#13;
spring:&#13;
## redis 配置&#13;
  redis:&#13;
    host: localhost&#13;
    port: 6379&#13;
    password:&#13;
    database: 1&#13;
```&#13;
## 使用默认的序列化&#13;
```java&#13;
@SpringBootTest&#13;
public class redisTest {&#13;
&#13;
    @Resource&#13;
    private RedisTemplate redisTemplate;&#13;
&#13;
    @Test&#13;
    void redisTest(){&#13;
        ValueOperations valueOperations = redisTemplate.opsForValue();&#13;
        valueOperations.set('name','respond');&#13;
        valueOperations.set('age',1);&#13;
    }&#13;
}&#13;
```&#13;
最后存储在redis中的k-v如下：&#13;
```&#13;
\xac\xed\x00\x05t\x00\x03age:{&#13;
    'fields': [&#13;
        {&#13;
            'value': 1&#13;
        }&#13;
    ],&#13;
    'annotations': [],&#13;
    'className': 'java.lang.Integer',&#13;
    'serialVersionUid': 1360826667806852920&#13;
}&#13;
\xac\xed\x00\x05t\x00\x04name:\xac\xed\x00\x05t\x00\x07respond&#13;
```&#13;
可以看出默认的序列化有问题，这时候我们就要自己定义序列化&#13;
## 自定义序列化&#13;
为了防止写入 Redis 的数据乱码、浪费空间等，可以自定义序列化器。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/Java%20-cao-zuo-%20Redis.html</guid><pubDate>Sun, 06 Oct 2024 15:02:43 +0000</pubDate></item><item><title>Java 8 特性</title><link>https://respondijia.github.io/respond.github.io/post/Java%208%20-te-xing.html</link><description>## stream / parallelstream流式处理&#13;
parallelStream() 方法可以将集合数据分成多个小块，分配到多个线程并行处理，从而提高程序的执行效率。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/Java%208%20-te-xing.html</guid><pubDate>Wed, 02 Oct 2024 09:18:36 +0000</pubDate></item><item><title>权限限制-Java安全管理器</title><link>https://respondijia.github.io/respond.github.io/post/quan-xian-xian-zhi--Java-an-quan-guan-li-qi.html</link><description>目标：限制用户对文件、内存、CPU、网络等资源的操作和访问。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/quan-xian-xian-zhi--Java-an-quan-guan-li-qi.html</guid><pubDate>Tue, 17 Sep 2024 04:02:33 +0000</pubDate></item><item><title>HuTool之字典树工具类WordTree</title><link>https://respondijia.github.io/respond.github.io/post/HuTool-zhi-zi-dian-shu-gong-ju-lei-WordTree.html</link><description>先定义一个黑白名单，比如哪些操作是禁止的，可以就是一个列表：&#13;
&#13;
```java&#13;
private static final List&lt;String&gt; blackList = Arrays.asList('Files', 'exec');&#13;
```&#13;
&#13;
还可以使用字典树代替列表存储单词，用 更少的空间 存储更多的敏感词汇，并且实现 更高效 的敏感词查找。</description><guid isPermaLink="true">https://respondijia.github.io/respond.github.io/post/HuTool-zhi-zi-dian-shu-gong-ju-lei-WordTree.html</guid><pubDate>Mon, 16 Sep 2024 05:45:08 +0000</pubDate></item></channel></rss>